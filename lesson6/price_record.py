"""
6. Реализовать простую систему хранения данных о суммах продаж булочной.
Должно быть два скрипта с интерфейсом командной строки: для записи данных
и для вывода на экран записанных данных.
При записи передавать из командной строки значение суммы продаж. Для чтения данных
реализовать в командной строке следующую логику:
просто запуск скрипта — выводить все записи;
запуск скрипта с одним параметром-числом — выводить все записи с номера,
равного этому числу, до конца;
запуск скрипта с двумя числами — выводить записи, начиная с номера, равного первому числу,
по номер, равный второму числу, включительно.
Подумать, как избежать чтения всего файла при реализации второго и третьего случаев.
Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация записей начинается с 1.
Примеры запуска скриптов:
python add_sale.py 5978,5
python add_sale.py 8914,3
python add_sale.py 7879,1
python add_sale.py 1573,7
python show_sales.py #вывелось все
5978,5
8914,3
7879,1
1573,7
python show_sales.py 3 #вывелось начиная с 3-го
7879,1
1573,7
python show_sales.py 1 3 #вывелось с 1 по 3
5978,5
8914,3
7879,1
"""
"""Вариант подачи данных не через командную строку, а через массив"""
# prices = [64.2, 20, 35.1, 22, 7]
# def procees(argv):
#     program, *args = argv #что за program?
#     with open('bakery.csv', 'w', encoding='utf-8') as file:
#         for coast in prices:
#             file.write('%s\n' % coast)
# procees(prices)


# """Подача данных через командную строку"""
def procees(argv):
    program, *args = argv #что за program?
    with open('bakery.csv', 'a', encoding='utf-8') as file:
        file.writelines(args)

if __name__ == '__main__':
    import sys
    (procees(sys.argv))
